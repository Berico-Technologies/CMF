<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which
         assemblies to include from solution and project documentation
         sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{e72c9f29-3f91-417d-be98-274394d47b38}</ProjectGuid>
    <SHFBSchemaVersion>1.9.5.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual
         Studio adds them anyway -->
    <AssemblyName>cmf.docs</AssemblyName>
    <RootNamespace>cmf.docs</RootNamespace>
    <Name>cmf.docs</Name>
    <!-- SHFB properties -->
    <FrameworkVersion>.NET Framework 4.0</FrameworkVersion>
    <OutputPath>output\</OutputPath>
    <HtmlHelpName>cmf.docs</HtmlHelpName>
    <Language>en-US</Language>
    <DocumentationSources>
      <DocumentationSource sourceFile="..\cmf.sln" xmlns="" />
    </DocumentationSources>
    <BuildAssemblerVerbosity>OnlyWarningsAndErrors</BuildAssemblerVerbosity>
    <HelpFileFormat>Website</HelpFileFormat>
    <IndentHtml>True</IndentHtml>
    <KeepLogFile>True</KeepLogFile>
    <DisableCodeBlockComponent>False</DisableCodeBlockComponent>
    <CppCommentsFixup>False</CppCommentsFixup>
    <CleanIntermediates>True</CleanIntermediates>
    <SyntaxFilters>CSharp, VisualBasic</SyntaxFilters>
    <SdkLinkTarget>Blank</SdkLinkTarget>
    <RootNamespaceContainer>False</RootNamespaceContainer>
    <PresentationStyle>VS2010</PresentationStyle>
    <Preliminary>False</Preliminary>
    <NamingMethod>MemberName</NamingMethod>
    <HelpTitle>Common Messaging Framework API Documentation</HelpTitle>
    <CopyrightText>Copyright Berico Technologes LLC 2013</CopyrightText>
    <ContentPlacement>AboveNamespaces</ContentPlacement>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="cmf.bus" isDocumented="True">&lt;p&gt;The cmf.bus namespace defines the interfaces, and their dependent types, needed to send and receive messages on a message bus.  The central type of the namespace is the Envelope.  An Envelope is the CMF representation of a message in its most basic form.  All other members of the cmf.bus namespace concern themselves with sending and receiving envelopes.&lt;/p&gt;
&lt;p&gt;Sending and receiving envelopes on a bus is the most primitive construct in CMF.  All other CMF APIs are generally intended in their implementation to utilize the cmf.bus API as their transport and act as higher level abstractions on top of it.&lt;/p&gt;</NamespaceSummaryItem>
<NamespaceSummaryItem name="cmf.bus.support" isDocumented="True">The cmf.bus.support namespace contains utility classes that support sending and receiving of envelopes.</NamespaceSummaryItem>
<NamespaceSummaryItem name="cmf.eventing" isDocumented="True">&lt;p&gt;The cmf.eventing namespace defines the interfaces, and their dependent types, needed to publish and subscribe to events on an event bus.  Events in CMF are simply plain-old-c#-objects (POCOs) and are strongly typed.  Inheritance however is intentionally not supported.  That is subscribing to an "Alert" event will not get you instances of the "Critial Alert" sub-type, should any be published.&lt;/p&gt;

&lt;p&gt;Implementations of this namespace are presumed to use an implementation of the cmf.bus namespace under the hood.  That is to say, eventing implementations should by one means or another transform all POCO events to Envelopes that are sent using an IEnvelopeSender and should receive all events as Envelopes from an IEnvelopeReceiver and transform them back into the appropriate strongly typed POCOs.&lt;/p&gt;</NamespaceSummaryItem>
<NamespaceSummaryItem name="cmf.eventing.patterns.rpc" isDocumented="True">The cmf.eventing.patterns.rpc namespace is an extension of the cmf.eventing namespace that defines additional interfaces, and their dependent types, needed to perform asynchronous, event based, remote procedure calls.  The APIs defined in this namespace permit one to publish an event and wait for another event or events in response to it as well as to receive an event and send one or more events in response to it.</NamespaceSummaryItem>
<NamespaceSummaryItem name="cmf.eventing.patterns.streaming" isDocumented="True">&lt;p&gt;The cmf.eventing.patterns.streaming namespace is an extension of the cmf.eventing namespace that defines additional interfaces, and their dependent types, useful for sending large amounts of data as a stream of related events, referred to as an event-stream.&lt;/p&gt;

&lt;p&gt;The APIs support two basic forms of streaming, one in which events in the stream are published and received individually, and one in which all events in the stream are published at once and handled at once.  The former mode is most useful when needing to send data that is being generated or retrieved incrementally and where the total amount of data to be sent is not known in advance.  It allows receivers of the data to process each block (event) of data in the stream as it becomes available.  The latter mode is most useful when all the data is available at once at the producing end, and can be processed all at once on the consuming end, but the total data size is such that sending it as a single event may be prohibitive.&lt;/p&gt;</NamespaceSummaryItem></NamespaceSummaries>
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in
       order for Visual Studio to perform the build.  The others are optional
       common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <ItemGroup>
    <ProjectReference Include="..\source\cmf.bus\cmf.bus.csproj">
      <Name>cmf.bus</Name>
      <Project>{5386254b-6a77-4244-9364-1013899a2b11}</Project>
      <Private>True</Private>
    </ProjectReference>
    <ProjectReference Include="..\source\cmf.eventing\cmf.eventing.csproj">
      <Name>cmf.eventing</Name>
      <Project>{f468ddba-2e1a-49f7-8a36-f362ac1a90f8}</Project>
      <Private>True</Private>
    </ProjectReference>
  </ItemGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
</Project>